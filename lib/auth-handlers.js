// Generated by LiveScript 1.2.0
(function(){
  var fs, async, jade, querystring, url, sioa, pg, auth, __, announce, ref$, isEditing, isAdmin, isAuth, doVerify, authFinisher, this$ = this;
  fs = require('fs');
  async = require('async');
  jade = require('jade');
  querystring = require('querystring');
  url = require('url');
  sioa = require('socket.io-announce');
  pg = require('./postgres');
  auth = require('./auth');
  __ = require('lodash');
  announce = sioa.createClient();
  ref$ = require('./path-regexps'), isEditing = ref$.isEditing, isAdmin = ref$.isAdmin, isAuth = ref$.isAuth;
  this.login = function(req, res, next){
    var site, domain, siteRoom;
    site = res.vars.site;
    domain = site.current_domain;
    siteRoom = site.id;
    return auth.passportForDomain(domain, function(err, passport){
      var authResponse;
      if (err) {
        return next(err);
      }
      if (passport) {
        authResponse = function(err, user, info){
          var extra, maybeJoinSite;
          if (err) {
            return next(err);
          }
          if (!user) {
            return res.json(import$({
              success: false
            }, info));
          }
          extra = {};
          maybeJoinSite = user && !user.name
            ? function(cb){
              var email;
              console.error("joining site for first time");
              email = req.body.username;
              return db.aliases.mostRecentForUser(user.id, function(err, defaultAlias){
                if (err) {
                  return cb(err);
                }
                return db.uniqueName({
                  name: defaultAlias.name,
                  site_id: site.id
                }, function(err, uniqueName){
                  var alias;
                  if (err) {
                    return cb(err);
                  }
                  alias = {
                    user_id: defaultAlias.user_id,
                    site_id: site.id,
                    name: uniqueName,
                    rights: {},
                    photo: defaultAlias.photo
                  };
                  return db.aliasCreatePreverified(alias, function(err){
                    var newUser;
                    if (err) {
                      cb(err);
                    }
                    extra.chooseName = true;
                    extra.name = uniqueName;
                    newUser = import$(user, alias);
                    return cb(null, newUser);
                  });
                });
              });
            }
            : function(cb){
              return cb(null, user);
            };
          return maybeJoinSite(function(err, maybeNewUser){
            if (err) {
              res.json({
                success: false
              });
            }
            return req.login(maybeNewUser, function(err){
              if (err) {
                return next(err);
              }
              announce['in'](siteRoom).emit('enter-site', user);
              return db.aliases.updateLastActivityForUser(user, function(err){
                if (err) {
                  return next(err);
                }
                return res.json(import$({
                  success: true
                }, extra));
              });
            });
          });
        };
        return passport.authenticate('local', authResponse)(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  this.once = function(req, res, next){
    var token, site;
    token = req.body.token;
    site = res.vars.site;
    return db.authenticateLoginToken(site.id, token, function(err, r){
      var ref$, ref1$;
      console.warn('authenticate-login-token', [err, r]);
      if (err) {
        return next(err);
      }
      if (r) {
        if ((ref$ = req.session) != null) {
          if ((ref1$ = ref$.passport) != null) {
            ref1$.user = r.name + ":" + site.id;
          }
        }
        return res.json({
          success: true,
          chooseName: !!((ref$ = r.created_human) != null && ref$.match(/Just now/i)),
          name: r.name
        });
      } else {
        return res.json({
          success: false
        });
      }
    });
  };
  this.onceSetup = function(req, res, next){
    var siteId, user;
    try {
      siteId = parseInt(req.query.site_id);
    } catch (e$) {}
    if (!siteId) {
      return;
    }
    user = {
      id: req.user.id,
      site_id: siteId
    };
    return auth.setLoginToken(user, function(err, r){
      if (err) {
        return next(err);
      }
      if (r) {
        return res.json({
          success: true,
          token: r.login_token
        });
      } else {
        return res.json({
          success: false
        });
      }
    });
  };
  this.onceAdmin = function(req, res, next){
    return res.render('once-admin');
  };
  this.register = function(req, res, next){
    var site, domain, passport;
    site = res.vars.site;
    domain = site.current_domain;
    passport = auth.passportForDomain[domain];
    if (res.locals.inviteOnly) {
      next(404);
      return;
    }
    req.assert('username').notEmpty().isAlphanumeric();
    req.assert('password').notEmpty();
    req.assert('email').isEmail();
    return db.users.emailInUse({
      email: req.body.email
    }, function(err, user){
      if (err) {
        return res.json({
          success: false,
          errors: [err]
        });
      }
      if (user) {
        console.log('email-exists', err, user, req.body.email, site.id);
        return res.json({
          success: false,
          errors: ["This email address has already been registered."]
        });
      }
      return db.aliases.selectOne({
        site_id: site.id,
        name: req.body.username
      }, function(err, alias){
        var errors, username, password, email;
        if (err) {
          return res.json({
            success: false,
            errors: [err]
          });
        }
        if (alias) {
          console.log('name-exists', err, alias, req.body.username, site.id);
          return res.json({
            success: false,
            errors: ["This name has already been registered on this site."]
          });
        }
        if (errors = req.validationErrors()) {
          console.warn(errors);
          return res.json({
            errors: errors
          });
        } else {
          username = req.body.username;
          password = req.body.password;
          email = req.body.email;
          return registerLocalUser(site, username, password, email, function(err, u){
            var done;
            if (err) {
              if (err != null && err.verify) {
                console.warn('user exists:', err, site);
                auth.sendRegistrationEmail(err, site, function(){
                  return res.json({
                    success: false,
                    errors: [{
                      msg: 'Resent verification email!'
                    }]
                  });
                });
              } else {
                return res.json({
                  success: false,
                  errors: [err.msg]
                });
              }
            }
            done = function(){
              auth.sendRegistrationEmail(u, site, function(err, r){
                return console.warn('registration email', err, r);
              });
              return db.aliases.updateLastActivityForUser(u, function(err){
                if (err) {
                  next(err);
                }
                req.body.username = email;
                if (!site.config['private']) {
                  return this$.login(req, res, next);
                } else {
                  return res.json({
                    success: true
                  });
                }
              });
            };
            return done();
          });
        }
      });
    });
  };
  doVerify = function(req, res, next){
    var v, site;
    v = req.param('v');
    site = res.vars.site;
    return db.verifyUser(site.id, v, function(err, r){
      var ref$, ref1$;
      if (err) {
        return next(err);
      }
      if (r) {
        if ((ref$ = req.session) != null) {
          if ((ref1$ = ref$.passport) != null) {
            ref1$.user = r.name + ":" + site.id;
          }
        }
        if (res.vars.isInvite || site.config['private']) {
          return res.redirect('/#choose');
        } else {
          return res.redirect('/#validate');
        }
      } else {
        return res.redirect('/#invalid');
      }
    });
  };
  this.verify = function(req, res, next){
    return doVerify(req, res, next);
  };
  this.invite = function(req, res, next){
    if (req.user) {
      return res.redirect("/#invalid=" + req.user.name.replace(/@.*/, ''));
    } else {
      res.vars.isInvite = true;
      return doVerify(req, res, next);
    }
  };
  this.forgot = function(req, res, next){
    var db, site, email;
    db = pg.procs;
    site = res.vars.site;
    email = req.body.email;
    if (!email) {
      res.json({
        success: false,
        errors: ['Blank email']
      });
      return;
    }
    return db.users.byEmailAndSite(email, site.id, function(err, user){
      if (err) {
        res.json({
          success: false,
          errors: [err]
        });
        return;
      }
      if (user) {
        return auth.userForgotPassword(user, function(err, userForgot){
          if (err) {
            res.json({
              success: false,
              errors: [err]
            });
            return;
          }
          return auth.sendRecoveryEmail(userForgot, site, function(err){
            if (err) {
              return res.json({
                success: false,
                errors: [err]
              });
            } else {
              return res.json({
                success: true
              });
            }
          });
        });
      } else {
        return res.json({
          success: false,
          errors: ['User not found']
        });
      }
    });
  };
  this.forgotUser = function(req, res, next){
    var site, hash;
    site = res.vars.site;
    hash = req.body.forgot;
    return db.usr({
      forgot: hash,
      site_id: site.id
    }, function(err, user){
      if (err) {
        return res.json({
          success: false,
          errors: [err]
        });
      }
      if (user) {
        return res.json({
          success: true
        });
      } else {
        return res.json({
          success: false,
          errors: ["User not found"]
        });
      }
    });
  };
  this.resetPassword = function(req, res, next){
    var site, hash, password;
    site = res.vars.site;
    hash = req.body.forgot;
    password = req.body.password;
    return db.usr({
      forgot: hash,
      site_id: site.id
    }, function(err, user){
      var authsLocal;
      if (err) {
        console.warn('usr', err);
        return res.json({
          success: false,
          errors: [err]
        });
      }
      if (user) {
        authsLocal = user.auths.local;
        authsLocal.password = auth.hash(password);
        return db.auths.update({
          profile: authsLocal
        }, {
          type: 'local',
          user_id: user.id
        }, function(err){
          if (err) {
            console.warn('auths-update', err);
            return res.json({
              success: false,
              errors: [err]
            });
          }
          return db.aliasBlank(user, function(err){
            if (err) {
              console.warn('alias-blank', err);
              return res.json({
                success: false,
                errors: [err]
              });
            }
            return res.json({
              success: true
            });
          });
        });
      } else {
        console.warn('usr', "User not found");
        return res.json({
          success: false,
          errors: ["User not found"]
        });
      }
    });
  };
  this.resend = function(req, res, next){
    var site, email;
    site = res.vars.site;
    email = req.body.email;
    return db.users.byEmailAndSite(email, site.id, function(err, user){
      if (err) {
        return res.json({
          success: false,
          when: 'db.usr'
        });
      }
      return auth.uniqueHash('verify', site.id, function(err, verify){
        if (err) {
          return res.json({
            success: false,
            when: 'auth.unique-hash'
          });
        }
        user.verify = verify;
        return db.aliases.update({
          verify: verify
        }, {
          user_id: user.id,
          site_id: site.id
        }, function(err){
          if (err) {
            return res.json({
              success: false,
              when: 'db.aliases.update'
            });
          }
          return auth.sendRegistrationEmail(user, site, function(err){
            if (err) {
              return res.json({
                success: false,
                when: 'auth.send-registration-email'
              });
            }
            return res.json({
              success: true
            });
          });
        });
      });
    });
  };
  this.chooseUsername = function(req, res, next){
    var user, site, db, usr;
    user = req.user;
    site = res.vars.site;
    if (!user) {
      return res.json({
        success: false
      });
    }
    db = pg.procs;
    usr = {
      user_id: user.id,
      site_id: user.site_id,
      name: req.body.username
    };
    return db.changeAlias(usr, function(err, r){
      var maybeAddAliases;
      if (err) {
        return res.json({
          success: false,
          msg: 'Name in-use!'
        });
      }
      maybeAddAliases = site.id === 1
        ? function(cb){
          var cvars, defaultSiteIds;
          cvars = global.cvars;
          defaultSiteIds = filter(function(it){
            return it !== user.site_id;
          })(
          cvars.defaultSiteIds);
          return db.aliases.addToUser(user.id, defaultSiteIds, {
            name: req.body.username,
            verified: true
          }, cb);
        }
        : function(cb){
          return cb(null);
        };
      return maybeAddAliases(function(err){
        var ref$, ref1$;
        if (err) {
          return res.json({
            success: false
          });
        }
        if ((ref$ = req.session) != null) {
          if ((ref1$ = ref$.passport) != null) {
            ref1$.user = req.body.username + ":" + user.site_id;
          }
        }
        return res.json({
          success: true
        });
      });
    });
  };
  this.loginFacebook = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      if (err) {
        return next(err);
      }
      if (passport) {
        req.session.origin = req.query.origin;
        return passport.authenticate('facebook')(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send(500, '500');
      }
    });
  };
  this.loginFacebookReturn = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      if (err) {
        return next(err);
      }
      if (passport) {
        return passport.authenticate('facebook', {
          successRedirect: '/auth/facebook/finish',
          failureRedirect: '/auth/facebook/finish?fail=1'
        })(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  authFinisher = function(req, res, next){
    var user, origin, host;
    user = req.user;
    origin = req.session.origin;
    host = process.env.NODE_ENV === 'production' ? 'powerbulletin' : 'pb';
    return db.aliases.updateLastActivityForUser(user, function(err){
      if (err) {
        return next(err);
      }
      return res.send("<script type=\"text/javascript\" src=\"https://muscache." + host + ".com/local/jquery-1.10.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://muscache." + host + ".com/local/jquery.ba-postmessage.min.js\"></script>\n<script type=\"text/javascript\">\n  $.postMessage(\"login\", \"" + origin + "\", window.opener);\n  window.close();\n</script>");
    });
  };
  this.loginFacebookFinish = authFinisher;
  this.loginGoogle = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      var scope;
      if (err) {
        return next(err);
      }
      scope = 'https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile';
      if (passport) {
        req.session.origin = req.query.origin;
        return passport.authenticate('google', {
          scope: scope
        })(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  this.loginGoogleReturn = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      if (err) {
        return next(err);
      }
      if (passport) {
        return passport.authenticate('google', {
          successRedirect: '/auth/google/finish',
          failureRedirect: '/auth/google/finish?fail=1'
        })(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  this.loginGoogleFinish = authFinisher;
  this.loginTwitter = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      if (err) {
        return next(err);
      }
      if (passport) {
        req.session.origin = req.query.origin;
        return passport.authenticate('twitter')(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  this.loginTwitterReturn = function(req, res, next){
    var domain;
    domain = res.vars.site.current_domain;
    return auth.passportForDomain(domain, function(err, passport){
      if (err) {
        return next(err);
      }
      if (passport) {
        return passport.authenticate('twitter', {
          successRedirect: '/auth/twitter/finish',
          failureRedirect: '/auth/twitter/finish?fail=1'
        })(req, res, next);
      } else {
        console.warn("no passport for " + domain);
        return res.send('500', 500);
      }
    });
  };
  this.loginTwitterFinish = authFinisher;
  this.logout = function(req, res, next){
    var user, user_id, site_id;
    user = req.user;
    user_id = user != null ? user.id : void 8;
    site_id = res.vars.site.id;
    if (req.user) {
      req.logout();
      return db.aliases.updateLastActivityForUser({
        user_id: user_id,
        site_id: site_id
      }, function(err){
        var redirectUrl;
        if (err) {
          return next(err);
        }
        redirectUrl = url.parse(req.param('redirect-url') || req.header('Referer') || '/').pathname;
        if (req.headers['x-requested-with']) {
          return res.json({
            success: true
          });
        } else {
          return res.redirect(redirectUrl.replace(isEditing, '').replace(isAdmin, '').replace(isAuth, ''));
        }
      });
    } else {
      return res.redirect('/');
    }
  };
  this.user = function(req, res, next){
    req.user || (req.user = null);
    if (req.user) {
      return res.json(__.omit(req.user, 'auths'));
    } else {
      return res.json(null);
    }
  };
  this.noCache = function(req, res, next){
    cachingStrategies.nocache(res);
    return next();
  };
  this.applyTo = function(app, mw){
    app.all(/^\/auth\/.*$/, this.noCache);
    app.post('/auth/login', mw, this.login);
    app.post('/auth/once', mw, this.once);
    app.get('/auth/once-admin', mw, this.onceAdmin);
    app.post('/auth/register', mw, this.register);
    app.post('/auth/choose-username', mw, this.chooseUsername);
    app.get('/auth/user', mw, this.user);
    app.get('/auth/verify/:v', mw, this.verify);
    app.get('/auth/invite/:v', mw, this.invite);
    app.post('/auth/forgot', mw, this.forgot);
    app.post('/auth/forgot-user', mw, this.forgotUser);
    app.post('/auth/reset-password', mw, this.resetPassword);
    app.post('/auth/resend', mw, this.resend);
    app.get('/auth/facebook', mw, this.loginFacebook);
    app.get('/auth/facebook/return', mw, this.loginFacebookReturn);
    app.get('/auth/facebook/finish', mw, this.loginFacebookFinish);
    app.get('/auth/google', mw, this.loginGoogle);
    app.get('/auth/google/return', mw, this.loginGoogleReturn);
    app.get('/auth/google/finish', mw, this.loginGoogleFinish);
    app.get('/auth/twitter', mw, this.loginTwitter);
    app.get('/auth/twitter/return', mw, this.loginTwitterReturn);
    app.get('/auth/twitter/finish', mw, this.loginTwitterFinish);
    return app.get('/auth/logout', mw, this.logout);
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
