// Generated by LiveScript 1.2.0
(function(){
  var async, bcrypt, crypto, debug, nodemailer, passport, passportLocal, passportFacebook, passportTwitter, passportGoogleOauth, h, pg, Passport, log, mw, hash, validPassword, verifyString, uniqueHash, registrationEmailTemplateText, registrationEmailTemplateHtml, recoveryEmailTemplateText, recoveryEmailTemplateHtml, sendRegistrationEmail, sendRecoveryEmail, sendInviteEmail, userForgotPassword, setLoginToken, createPassport, passports, passportForDomain, out$ = typeof exports != 'undefined' && exports || this, this$ = this;
  async = require('async');
  bcrypt = require('bcrypt');
  crypto = require('crypto');
  debug = require('debug');
  nodemailer = require('nodemailer');
  passport = require('passport');
  passportLocal = require('passport-local');
  passportFacebook = require('passport-facebook');
  passportTwitter = require('passport-twitter');
  passportGoogleOauth = require('passport-google-oauth');
  h = require('./server-helpers');
  pg = require('./postgres');
  Passport = require('passport').Passport;
  log = debug('auth');
  out$.mw = mw = {
    initialize: function(req, res, next){
      var domain, ref$;
      domain = (ref$ = res.vars.site) != null ? ref$.current_domain : void 8;
      return this$.passportForDomain(domain, function(err, passport){
        if (err) {
          return next(err);
        }
        if (passport) {
          return passport.mwInitialize(req, res, next);
        } else {
          return next(404);
        }
      });
    },
    session: function(req, res, next){
      var site_id, ref$, domain;
      site_id = (ref$ = res.vars.site) != null ? ref$.id : void 8;
      domain = (ref$ = res.vars.site) != null ? ref$.current_domain : void 8;
      return this$.passportForDomain(domain, function(err, passport){
        if (err) {
          return next(err);
        }
        if (passport) {
          return passport.mwSession(req, res, next);
        } else {
          return next(404);
        }
      });
    }
  };
  out$.hash = hash = function(s){
    return bcrypt.hashSync(s, 5);
  };
  out$.validPassword = validPassword = function(user, password){
    var ref$, ref1$;
    if (!user || !password) {
      return false;
    }
    return bcrypt.compareSync(password, user != null ? (ref$ = user.auths) != null ? (ref1$ = ref$.local) != null ? ref1$.password : void 8 : void 8 : void 8);
  };
  out$.verifyString = verifyString = function(){
    var buffer, char, i, v;
    buffer = crypto.randomBytes(32);
    char = function(c){
      var c2, c3;
      c2 = Math.floor(c / 10.24);
      c3 = c2 + 97;
      return String.fromCharCode(c3);
    };
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = buffer).length; i$ < len$; ++i$) {
        i = i$;
        v = ref$[i$];
        results$.push(char(v));
      }
      return results$;
    }()).join('');
  };
  out$.uniqueHash = uniqueHash = function(field, siteId, cb){
    var candidates, res$, i$, i, unique;
    res$ = [];
    for (i$ = 1; i$ <= 10; ++i$) {
      i = i$;
      res$.push(verifyString());
    }
    candidates = res$;
    unique = function(v, cb){
      return pg.procs.aliasUniqueHash(field, siteId, v, function(err, foundAlias){
        if (err) {
          return cb(err);
        }
        if (foundAlias) {
          return cb(false);
        } else {
          return cb(true);
        }
      });
    };
    return async.detect(candidates, unique, function(uv){
      return cb(null, uv);
    });
  };
  out$.registrationEmailTemplateText = registrationEmailTemplateText = "Welcome to {{site-name}}, {{user-name}}!\n\nTo verify your account, please visit:\n\n  https://{{site-domain}}/auth/verify/{{user-verify}}\n";
  out$.registrationEmailTemplateHtml = registrationEmailTemplateHtml = "";
  out$.recoveryEmailTemplateText = recoveryEmailTemplateText = "Hello,\n\nTo recover your password for {{site-name}}, please visit:\n\n  https://{{site-domain}}/#recover={{user-forgot}}\n";
  out$.recoveryEmailTemplateHtml = recoveryEmailTemplateHtml = "";
  out$.sendRegistrationEmail = sendRegistrationEmail = function(user, site, cb){
    var vars, email;
    vars = {
      "site-name": site.name,
      "site-domain": site.current_domain,
      "user-name": user.name,
      "user-verify": user.verify
    };
    email = {
      from: "noreply@" + site.current_domain,
      to: user.email,
      subject: "Welcome to " + site.name,
      text: h.expandHandlebars(registrationEmailTemplateText, vars)
    };
    return h.sendMail(email, cb);
  };
  out$.sendRecoveryEmail = sendRecoveryEmail = function(user, site, cb){
    var vars, email;
    vars = {
      "site-name": site.name,
      "site-domain": site.current_domain,
      "user-name": user.name,
      "user-forgot": user.forgot
    };
    email = {
      from: "noreply@" + site.current_domain,
      to: user.email,
      subject: "[" + site.name + "] Password Recovery",
      text: h.expandHandlebars(recoveryEmailTemplateText, vars)
    };
    return h.sendMail(email, cb);
  };
  out$.sendInviteEmail = sendInviteEmail = function(site, user, newUser, message, cb){
    var vars, tmpl, email;
    vars = {
      "site-name": site.name,
      "site-domain": site.current_domain,
      "user-email": newUser.email,
      "user-verify": newUser.verify,
      "message": message
    };
    tmpl = "{{message}}\n\nFollow this link and login:\n https://{{site-domain}}/auth/invite/{{user-verify}}";
    email = {
      from: user.name + "@" + site.current_domain,
      to: user.email,
      subject: "Invite to " + site.name + "!",
      text: h.expandHandlebars(tmpl, vars)
    };
    log(email);
    return h.sendMail(email, cb);
  };
  out$.userForgotPassword = userForgotPassword = function(user, cb){
    return uniqueHash('forgot', user.site_id, function(err, hash){
      if (err) {
        return cb(err);
      }
      user.forgot = hash;
      return db.aliases.update({
        forgot: hash
      }, {
        user_id: user.id,
        site_id: user.site_id
      }, function(err){
        return cb(null, user);
      });
    });
  };
  out$.setLoginToken = setLoginToken = function(user, cb){
    return uniqueHash('login_token', user.site_id, function(err, hash){
      var newlyCreated, maybeCreateAlias;
      if (err) {
        return cb(err);
      }
      newlyCreated = false;
      maybeCreateAlias = function(cb){
        return db.aliases.selectOne({
          user_id: user.id,
          site_id: user.site_id
        }, function(err, alias){
          if (err) {
            return cb(err);
          }
          if (!alias) {
            newlyCreated = true;
            console.warn('creating-alias');
            return db.aliases.selectOne({
              user_id: user.id,
              site_id: 1
            }, function(err, alias){
              if (err) {
                return cb(err);
              }
              if (!alias) {
                return cb(new Error("user " + user.id + " has no alias for site_id 1"));
              }
              return db.uniqueName({
                name: alias.name,
                site_id: user.site_id
              }, function(err, uniqueName){
                return db.aliases.addToUser(user.id, [user.site_id], {
                  name: uniqueName,
                  photo: '/images/profile.png'
                }, cb);
              });
            });
          } else {
            return cb(null);
          }
        });
      };
      return maybeCreateAlias(function(err){
        if (err) {
          return cb(err);
        }
        user.login_token = hash;
        user.chooseUsername = newlyCreated;
        return db.aliases.update({
          login_token: hash
        }, {
          user_id: user.id,
          site_id: user.site_id
        }, function(err){
          if (err) {
            return cb(err);
          }
          return cb(null, user);
        });
      });
    });
  };
  out$.createPassport = createPassport = function(domain, cb){
    var this$ = this;
    return db.siteByDomain(domain, function(err, site){
      var currentDomain, config, pass, cvars, facebookOptions, twitterOptions, googleOptions;
      if (err) {
        return cb(err);
      }
      currentDomain = find(function(it){
        return it.name === site.current_domain;
      }, site.domains);
      if (!currentDomain) {
        return cb(new Error("domain object for " + site.current_domain + " could not be found"));
      }
      config = currentDomain.config;
      pass = new Passport;
      cvars = global.cvars;
      pass.mwInitialize = pass.initialize();
      pass.mwSession = pass.session();
      pass.serializeUser(function(user, done){
        var parts;
        log('user', 'xxx', user);
        parts = user.name + ":" + user.site_id;
        return done(null, parts);
      });
      pass.deserializeUser(function(parts, done){
        var ref$, name, site_id;
        log('parts', parts);
        ref$ = parts.split(':'), name = ref$[0], site_id = ref$[1];
        return db.usr({
          name: name,
          site_id: site_id
        }, function(err, user){
          if (err) {
            return cb(err);
          }
          if (name && site_id) {
            return done(null, user);
          } else {
            return done(new Error("bad cookie " + parts));
          }
        });
      });
      pass.use(new passportLocal.Strategy(function(email, password, done){
        console.log(email, site.id);
        return db.users.byEmailAndSite(email, site.id, function(err, user){
          var errors;
          errors = ["Invalid login"];
          if (err) {
            return done(err);
          }
          if (!user) {
            log('no user');
            return done(null, false, {
              errors: errors
            });
          }
          if (!validPassword(user, password)) {
            log('invalid password', password, user);
            return done(null, false, {
              errors: errors
            });
          }
          log('ok');
          return done(null, user);
        });
      }));
      facebookOptions = {
        clientID: (config != null ? config.facebookClientId : void 8) || 'x',
        clientSecret: (config != null ? config.facebookClientSecret : void 8) || 'x',
        callbackURL: "https://" + domain + "/auth/facebook/return"
      };
      pass.use(new passportFacebook.Strategy(facebookOptions, function(accessToken, refreshToken, profile, done){
        log('facebook profile', profile);
        return db.uniqueName({
          name: profile.displayName,
          site_id: site.id
        }, function(err, name){
          if (err) {
            return cb(err);
          }
          return uniqueHash('verify', site.id, function(err, vstring){
            var u;
            if (err) {
              return cb(err);
            }
            u = {
              type: 'facebook',
              id: profile.id,
              profile: profile._json,
              site_id: site.id,
              name: name,
              verify: vstring
            };
            return db.findOrCreateUser(u, function(err, user){
              if (err) {
                log('err', err);
              }
              return done(err, user);
            });
          });
        });
      }));
      twitterOptions = {
        consumerKey: (config != null ? config.twitterConsumerKey : void 8) || 'x',
        consumerSecret: (config != null ? config.twitterConsumerSecret : void 8) || 'x',
        callbackURL: "https://" + domain + "/auth/twitter/return"
      };
      pass.use(new passportTwitter.Strategy(twitterOptions, function(accessToken, refreshToken, profile, done){
        log('twitter profile', profile);
        return db.uniqueName({
          name: profile.displayName,
          site_id: site.id
        }, function(err, name){
          if (err) {
            return cb(err);
          }
          return uniqueHash('verify', site.id, function(err, vstring){
            var u;
            if (err) {
              return cb(err);
            }
            u = {
              type: 'twitter',
              id: profile.id,
              profile: profile._json,
              site_id: site.id,
              name: name,
              verify: vstring
            };
            return db.findOrCreateUser(u, function(err, user){
              if (err) {
                log('err', err);
              }
              return done(err, user);
            });
          });
        });
      }));
      googleOptions = {
        clientID: (config != null ? config.googleConsumerKey : void 8) || 'x',
        clientSecret: (config != null ? config.googleConsumerSecret : void 8) || 'x',
        callbackURL: "https://" + domain + "/auth/google/return"
      };
      pass.use(new passportGoogleOauth.OAuth2Strategy(googleOptions, function(accessToken, refreshToken, profile, done){
        log('google profile', profile);
        return db.uniqueName({
          name: profile.displayName,
          site_id: site.id
        }, function(err, name){
          if (err) {
            return cb(err);
          }
          return uniqueHash('verify', site.id, function(err, vstring){
            var u;
            if (err) {
              return cb(err);
            }
            u = {
              type: 'google',
              id: profile.id,
              profile: profile._json,
              site_id: site.id,
              name: name,
              verify: vstring
            };
            log('u', u);
            return db.findOrCreateUser(u, function(err, user){
              if (err) {
                log('err', err);
              }
              return done(err, user);
            });
          });
        });
      }));
      return cb(null, pass);
    });
  };
  out$.passports = passports = {};
  out$.passportForDomain = passportForDomain = function(domain, cb){
    if (this$.passports[domain]) {
      return cb(null, this$.passports[domain]);
    } else {
      return this$.createPassport(domain, function(err, pass){
        if (err) {
          return cb(err);
        }
        if (pass) {
          this$.passports[domain] = pass;
          return cb(null, pass);
        } else {
          return cb(new Error("Could not create Passport for " + domain + "."));
        }
      });
    }
  };
}).call(this);
